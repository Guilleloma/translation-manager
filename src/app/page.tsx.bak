"use client";
import React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';
// Funci√≥n para generar IDs √∫nicos (alternativa a uuid)
function generateUniqueId() {
  return Date.now().toString(36) + Math.random().toString(36).substring(2, 11);
}
import {
  Box,
  Button,
  Container,
  Heading,
  VStack,
  HStack,
  Text,
  Input,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Badge,
  IconButton,
  useToast,
  Flex,
  Spacer,
  Select,
  useDisclosure,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  Divider,
  Tabs, TabList, TabPanels, Tab, TabPanel,
  Tooltip,
  InputGroup,
  InputLeftElement,
  Stack
} from '@chakra-ui/react';
import { SearchIcon, AddIcon } from '@chakra-ui/icons';
import { useUser } from '../context/UserContext';
import { CopyForm } from '../components/CopyForm';
import { Copy, CopyInput, CopyStatus, UserRole, CopyHistory } from '../types/copy';
import { TranslationStatus } from '../components/status/TranslationStatus';
import HistoryModal from '../components/history/HistoryModal';
import { CopyTable } from '../components/CopyTable';
import { CopyTableView } from "../components/CopyTableView";
import { slugify } from "../utils/slugify";
import { downloadGoogleSheetsCSV } from "../utils/exportToGoogleSheets";

export default function Home() {
  const { currentUser, isAuthenticated } = useUser();
  // Estado principal de la aplicaci√≥n
  const [copys, setCopys] = useState<Copy[]>([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [filteredCopys, setFilteredCopys] = useState<Copy[]>([]);
  const [editingCopy, setEditingCopy] = useState<Copy | null>(null);
  const [exportLanguage, setExportLanguage] = useState("all");
  const [currentLanguage, setCurrentLanguage] = useState("es");  // Estados para filtros
  const [viewMode, setViewMode] = useState<"list" | "table">("list");  // Estados para filtros
  const [statusFilter, setStatusFilter] = useState<CopyStatus | "all">("all");
  const [tagFilter, setTagFilter] = useState<string | "all">("all");
  
  // Estados para indicadores de carga
  const [isLoading, setIsLoading] = useState(true); // Carga inicial de datos
  const [isExporting, setIsExporting] = useState(false); // Exportaci√≥n de datos
  const [isSaving, setIsSaving] = useState(false); // Guardado de copys
  
  // Obtener las etiquetas disponibles de los copys existentes
  const availableTags = useMemo(() => {
    const tagsSet = new Set<string>();
    
    // Recorrer todos los copys y recopilar sus etiquetas
    copys.forEach(copy => {
      if (copy.tags && Array.isArray(copy.tags)) {
        copy.tags.forEach(tag => tagsSet.add(tag));
      }
    });
    
    // Convertir el Set a un array y ordenarlo alfab√©ticamente
    return Array.from(tagsSet).sort();
  }, [copys]);
  const [updateTrigger, setUpdateTrigger] = useState(0); // Nuevo estado para forzar actualizaciones
  const toast = useToast();

  // Estados para los modales
  const { isOpen: isHistoryOpen, onOpen: onHistoryOpen, onClose: onHistoryClose } = useDisclosure();
  const { isOpen: isEditOpen, onOpen: onEditOpen, onClose: onEditClose } = useDisclosure();
  
  // Copy seleccionado para ver su historial
  const [selectedHistoryCopy, setSelectedHistoryCopy] = useState<Copy | null>(null);
  
  // Estados para el modal de confirmaci√≥n de eliminaci√≥n
  const { isOpen: isDeleteModalOpen, onOpen: onDeleteModalOpen, onClose: onDeleteModalClose } = useDisclosure();
  const [copyToDelete, setCopyToDelete] = useState<{id: string, slug: string} | null>(null);

  // Cargar copys desde localStorage cuando el componente se monta
  useEffect(() => {
    console.log('üîÑ Cargando copys desde localStorage...');
    setIsLoading(true); // Activar indicador de carga
    
    // Simular una peque√±a demora para mostrar el indicador de carga
    setTimeout(() => {
      const storedCopys = localStorage.getItem('copys');
      if (storedCopys) {
        try {
          const parsedCopys = JSON.parse(storedCopys);
          console.log(`‚úÖ Cargados ${parsedCopys.length} copys desde localStorage`);
          setCopys(parsedCopys);
        } catch (error) {
          console.error('Error al cargar copys:', error);
          toast({
            title: "Error al cargar datos",
            description: "No se pudieron cargar los copys almacenados",
            status: "error",
            duration: 3000,
            isClosable: true,
          });
        }
      } else {
        console.log('‚ö†Ô∏è No hay copys almacenados en localStorage');
      }
      setIsLoading(false); // Desactivar indicador de carga
    }, 500); // Peque√±a demora para mostrar el indicador de carga
  }, [toast]);

  // DEBUG: Mostrar estado cuando cambia
  useEffect(() => {
    console.group('üîç DEPURACI√ìN: ESTADO ACTUAL DE COPYS');
    console.log(`Total: ${copys.length} copys`);
    
    // Crear un mapa para contar copys por slug
    const slugMap = new Map();
    
    copys.forEach(copy => {
      console.log(`ID: ${copy.id.substring(0, 8)}... | ${copy.slug} [${copy.language}] = "${copy.text}"`);
      
      // Contar copys por slug y por idioma
      const key = `${copy.slug}`;
      if (!slugMap.has(key)) {
        slugMap.set(key, new Set());
      }
      slugMap.get(key).add(copy.language);
    });
    
    // Resumen de slugs y sus idiomas
    console.log('üìä RESUMEN DE SLUGS:');
    slugMap.forEach((languages, slug) => {
      console.log(`  - ${slug}: disponible en ${Array.from(languages).join(', ')}`);
    });
    
    console.groupEnd();
  }, [copys]);
  
  // Filtrar copys seg√∫n la b√∫squeda, estado y etiquetas
  useEffect(() => {
    console.log(`Aplicando filtros - B√∫squeda: "${searchQuery}", Estado: ${statusFilter}, Etiqueta: ${tagFilter}`);
    
    // Aplicar filtros en secuencia: primero por texto, luego por estado, finalmente por etiqueta
    let filtered = [...copys];
    
    // Filtro por texto (b√∫squeda)
    if (searchQuery.trim() !== "") {
      const lowerQuery = searchQuery.toLowerCase();
      filtered = filtered.filter(
        (copy) =>
          copy.slug.toLowerCase().includes(lowerQuery) ||
          copy.text.toLowerCase().includes(lowerQuery)
      );
      console.log(`Filtro de texto aplicado: ${filtered.length}/${copys.length} copys coinciden`);
    }
    
    // Filtro por estado
    if (statusFilter !== "all") {
      filtered = filtered.filter(copy => copy.status === statusFilter);
      console.log(`Filtro de estado aplicado: ${filtered.length}/${copys.length} copys con estado ${statusFilter}`);
    }
    
    // Filtro por etiqueta
    if (tagFilter !== "all") {
      filtered = filtered.filter(copy => 
        copy.tags && copy.tags.includes(tagFilter)
      );
      console.log(`Filtro de etiqueta aplicado: ${filtered.length}/${copys.length} copys con etiqueta ${tagFilter}`);
    }
    
    setFilteredCopys(filtered);
  }, [searchQuery, statusFilter, tagFilter, copys, updateTrigger]); // A√±adido tagFilter a las dependencias

  // Manejar cambios de estado de las traducciones
  const handleStatusChange = useCallback((copyId: string, newStatus: CopyStatus, historyEntry?: CopyHistory) => {
    console.group('üîÑ CAMBIO DE ESTADO');
    console.log(`Copy ID: ${copyId}`);
    console.log(`Nuevo estado: ${newStatus}`);
    console.log('Entrada de historial:', historyEntry);
    
    setCopys(prevCopys => {
      const copyIndex = prevCopys.findIndex(c => c.id === copyId);
      
      if (copyIndex === -1) {
        console.error(`No se encontr√≥ el copy con ID: ${copyId}`);
        return prevCopys;
      }
      
      const updatedCopys = [...prevCopys];
      const copyToUpdate = { ...updatedCopys[copyIndex] };
      
      // Actualizar el estado del copy
      copyToUpdate.status = newStatus;
      copyToUpdate.updatedAt = new Date();
      
      // Actualizar fechas seg√∫n el estado
      const now = new Date();
      if (newStatus === 'assigned') {
        copyToUpdate.assignedAt = now;
      } else if (newStatus === 'translated') {
        copyToUpdate.completedAt = now;
      } else if (newStatus === 'reviewed') {
        copyToUpdate.reviewedAt = now;
        copyToUpdate.reviewedBy = currentUser?.id;
      } else if (newStatus === 'approved') {
        copyToUpdate.approvedAt = now;
        copyToUpdate.approvedBy = currentUser?.id;
      }
      
      // Agregar al historial si se proporciona
      if (historyEntry) {
        copyToUpdate.history = [
          ...(copyToUpdate.history || []),
          historyEntry
        ];
      }
      
      updatedCopys[copyIndex] = copyToUpdate;
      
      console.log('‚úÖ Estado actualizado exitosamente');
      console.groupEnd();
      
      return updatedCopys;
    });
  }, [currentUser?.id]);
  
  // Manejar la creaci√≥n o actualizaci√≥n de copys
  const handleSave = async (data: Omit<Copy, 'id' | 'status'>, isImport = false) => {
    console.group('üíæ Guardando copy');
    console.log('Datos recibidos:', data);
    
    // Activar indicador de carga si no es una importaci√≥n masiva
    if (!isImport && !(data as any).isBulkImport) {
      setIsSaving(true);
    }
    
    try {
      // Verificar si es una edici√≥n (actualizaci√≥n) o un nuevo copy
      if (editingCopy && editingCopy.id) {
        console.log('Actualizando copy existente:', editingCopy.id);
        
        // Crear copia del array actual para no mutar el estado directamente
        const updatedCopys = [...copys];
        
        // Encontrar el √≠ndice del copy a actualizar
        const copyIndex = updatedCopys.findIndex(c => c.id === editingCopy.id);
        
        if (copyIndex !== -1) {
          // Crear entrada de historial para el cambio
          const historyEntry: CopyHistory = {
            id: generateUniqueId(),
            date: new Date(),
            user: currentUser ? {
              id: currentUser.id,
              username: currentUser.username,
              email: currentUser.email
            } : {
              id: 'system',
              username: 'Sistema',
              email: 'system@example.com'
            },
            previousValue: updatedCopys[copyIndex].text,
            newValue: data.text,
            type: 'edit'
          };
          
          // Simular una peque√±a demora para mostrar el indicador de carga
          if (!isImport && !(data as any).isBulkImport) {
            await new Promise(resolve => setTimeout(resolve, 500));
          }
          
          // Actualizar el copy con los nuevos datos
          updatedCopys[copyIndex] = {
            ...updatedCopys[copyIndex],
            ...data,
            updatedAt: new Date(),
            // A√±adir la entrada al historial
            history: [
              ...(updatedCopys[copyIndex].history || []),
              historyEntry
            ]
          };
          
          // Actualizar el estado
          setCopys(updatedCopys);
          
          // Cerrar el modal de edici√≥n
          onEditClose();
          setEditingCopy(null);
          
          // Mostrar notificaci√≥n solo si no es una importaci√≥n masiva
          if (!isImport && !(data as any).isBulkImport) {
            toast({
              title: "Copy actualizado",
              description: `Se ha actualizado el copy "${data.slug}"`,
              status: "success",
              duration: 3000,
              isClosable: true,
            });
          }
        } else {
          console.error('No se encontr√≥ el copy a actualizar');
          if (!isImport && !(data as any).isBulkImport) {
            toast({
              title: "Error",
              description: "No se encontr√≥ el copy a actualizar",
              status: "error",
              duration: 3000,
              isClosable: true,
            });
          }
        }
      } else {
        console.log('Creando nuevo copy');
        
        // Simular una peque√±a demora para mostrar el indicador de carga
        if (!isImport && !(data as any).isBulkImport) {
          await new Promise(resolve => setTimeout(resolve, 500));
        }
        
        // Crear un nuevo copy con ID √∫nico
        const newCopy: Copy = {
          id: generateUniqueId(), // Generar ID √∫nico
          status: 'not_assigned',
          slug: data.slug || '', // No generamos slug autom√°ticamente
          text: data.text || `[Sin texto - ${new Date().toISOString().slice(0, 10)}]`,
          language: data.language,
          createdAt: new Date(),
          updatedAt: new Date()
        };
        
        // A√±adir el nuevo copy al array
        setCopys([...copys, newCopy]);
        
        // Cerrar el modal de edici√≥n si est√° abierto
        if (editingCopy) {
          onEditClose();
          setEditingCopy(null);
        }
        
        // Mostrar notificaci√≥n solo si no es una importaci√≥n masiva
        if (!isImport && !(data as any).isBulkImport) {
          toast({
            title: "Copy creado",
            description: `Se ha creado un nuevo copy con slug "${newCopy.slug}"`,
            status: "success",
            duration: 3000,
            isClosable: true,
          });
        }
      }
      
      // Actualizar localStorage
      localStorage.setItem('copys', JSON.stringify(
        // Si estamos editando, reemplazar el copy existente
        editingCopy && editingCopy.id
          ? copys.map(c => c.id === editingCopy.id ? {...c, ...data, updatedAt: new Date()} : c)
          : // Si es nuevo, a√±adirlo al array
            [...copys, {
              id: generateUniqueId(),
              status: 'not_assigned',
              ...data,
              createdAt: new Date(),
              updatedAt: new Date()
            }]
      ));
      
      // Forzar actualizaci√≥n de la UI
      setUpdateTrigger(prev => prev + 1);
    } catch (error) {
      console.error('Error al guardar el copy:', error);
      if (!isImport && !(data as any).isBulkImport) {
        toast({
          title: "Error",
          description: "Ha ocurrido un error al guardar el copy. Int√©ntalo de nuevo.",
          status: "error",
          duration: 3000,
          isClosable: true,
        });
      }
    } finally {
      // Desactivar indicador de carga
      if (!isImport && !(data as any).isBulkImport) {
        setIsSaving(false);
      }
    }
    
    console.groupEnd();
  };

  const exportToJson = async () => {
    console.log('Exportando a JSON...');
    setIsExporting(true); // Activar indicador de carga
    
    try {
      // Simular una peque√±a demora para mostrar el indicador de carga
      await new Promise(resolve => setTimeout(resolve, 800));
      
      let dataToExport: Copy[] = [];
      
      if (exportLanguage === "all") {
        dataToExport = [...copys];
      } else {
        dataToExport = copys.filter((c) => c.language === exportLanguage);
      }
      
      // Crear objeto anidado por idioma respetando la jerarqu√≠a indicada por los puntos en los slugs
      const byLanguage: Record<string, any> = {};
      
      // Funci√≥n auxiliar para crear estructura anidada a partir de paths con puntos
      const setNestedProperty = (obj: any, path: string[], value: string) => {
        let current = obj;
        
        // Recorremos todos los segmentos del path excepto el √∫ltimo
        for (let i = 0; i < path.length - 1; i++) {
          const key = path[i];
          // Si la propiedad no existe, la creamos como objeto vac√≠o
          if (!current[key]) {
            current[key] = {};
          }
          // Continuamos recorriendo el objeto anidado
          current = current[key];
        }
        
        // √öltimo segmento: asignamos el valor
        const lastKey = path[path.length - 1];
        current[lastKey] = value;
      };
      
      // Procesar cada copy para construir el objeto anidado
      dataToExport.forEach((copy) => {
        if (!byLanguage[copy.language]) {
          byLanguage[copy.language] = {};
        }
        
        // Dividir el slug por puntos para crear la estructura anidada
        const slugParts = copy.slug.split('.');
        
        // Crear estructura anidada
        setNestedProperty(byLanguage[copy.language], slugParts, copy.text);
      });
      
      const jsonStr = JSON.stringify(byLanguage, null, 2);
      
      // Descargar el archivo
      const blob = new Blob([jsonStr], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `translations_${exportLanguage}_${new Date().toISOString().slice(0, 10)}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      toast({
        title: "Exportaci√≥n completada",
        description: `Se ha exportado el archivo JSON con ${Object.keys(byLanguage).length} idiomas.`,
        status: "success",
        duration: 3000,
        isClosable: true,
      });
    } catch (error) {
      console.error('Error al exportar a JSON:', error);
      toast({
        title: "Error al exportar",
        description: "Ha ocurrido un error en la exportaci√≥n a JSON",
        status: "error",
        duration: 3000,
        isClosable: true,
      });
    } finally {
      setIsExporting(false); // Desactivar indicador de carga
    }
  };

  const exportToGoogleSheets = async () => {
    console.log('Exportando a formato CSV para Google Sheets...');
    setIsExporting(true); // Activar indicador de carga
    
    try {
      // Simular una peque√±a demora para mostrar el indicador de carga
      await new Promise(resolve => setTimeout(resolve, 800));
      
      // Filtrar copys seg√∫n el idioma seleccionado
      let filteredForExport = copys;
      if (exportLanguage !== "all") {
        filteredForExport = copys.filter(c => c.language === exportLanguage);
      }
      
      // Mapeo de idiomas internos a formato requerido por Google Sheets
      const languageCodes = [
        'en_GB', 'es_ES', 'it_IT', 'en_US', 'de_DE', 'fr_FR', 'pt_PT', 'pt_BR'
      ];
      
      // Generar nombre de archivo
      const fileName = `translations-gs-${exportLanguage === "all" ? "all" : exportLanguage}-${new Date().toISOString().split('T')[0]}.csv`;
      
      // Descargar como CSV para Google Sheets
      downloadGoogleSheetsCSV(
        filteredForExport,
        languageCodes, // Usar todos los c√≥digos de idioma definidos
        fileName
      );
      
      // Mostrar toast de √©xito
      toast({
        title: "Exportaci√≥n a Google Sheets completada",
        description: `Se ha exportado el archivo CSV con ${filteredForExport.length} filas.`,
        status: "success",
        duration: 3000,
        isClosable: true
      });
    } catch (error) {
      console.error("Error al exportar a Google Sheets:", error);
      toast({
        title: "Error al exportar",
        description: "Ha ocurrido un error en la exportaci√≥n a Google Sheets",
        status: "error",
        duration: 3000,
        isClosable: true,
      });
    } finally {
      setIsExporting(false); // Desactivar indicador de carga
    }
  };

  const cancelEdit = () => {
    <Container maxW="container.lg" py={8}>
      <HStack mb={4} justifyContent="space-between" alignItems="center">
        <Heading>Gesti√≥n de Copys</Heading>
        <HStack spacing={3}>
          <Button
            leftIcon={<AddIcon />}
            colorScheme="green"
            onClick={() => {
              setEditingCopy(null); // Asegurarse de que no hay un copy en edici√≥n
              onEditOpen();
            }}
          >
            Crear Copy
          </Button>
          <Button 
            colorScheme="teal" 
            leftIcon={<span>üì•</span>}
            onClick={() => {
              // Abrir la vista de tabla si no est√° activa
              if (viewMode !== "table") {
                setViewMode("table");
              }
              // Simulamos un clic en el bot√≥n de importaci√≥n del CopyTableView
              // Esto se manejar√° cuando se renderice el componente
              setTimeout(() => {
                const importButton = document.querySelector('[data-testid="bulk-import-button"]');
                if (importButton) {
                  (importButton as HTMLButtonElement).click();
                }
              }, 100);
            }}
          >
            Importar copys masivamente
          </Button>
        </HStack>
      </HStack>
      
      {/* Modal de creaci√≥n/edici√≥n */}
      <Modal isOpen={isEditOpen} onClose={cancelEdit} size="xl">
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>{editingCopy ? "Editar Copy" : "Crear Copy"}</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <CopyForm
              existingCopys={copys.filter(c => editingCopy ? c.id !== editingCopy.id : true)}
              onSave={(data) => {
                handleSave(data, !!editingCopy);
                onEditClose();
              }}
              onStatusChange={handleStatusChange}
              onAddComment={(copyId, comment) => {
                // Implementar l√≥gica para agregar comentarios si es necesario
                console.log('Agregando comentario:', { copyId, comment });
              }}
              onTagsChange={(copyId, tags) => {
                // Implementar l√≥gica para actualizar etiquetas si es necesario
                console.log('Actualizando etiquetas:', { copyId, tags });
              }}
              onCancel={cancelEdit}
              initialValues={editingCopy || {}}
              isEditing={!!editingCopy}
              // Pasar el setter de currentLanguage al formulario
              onLanguageChange={setCurrentLanguage}
            />
          </ModalBody>
          <ModalFooter>
            <Button variant="ghost" mr={3} onClick={cancelEdit}>
              Cancelar
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
      
      {/* Secci√≥n de b√∫squeda y filtros */}
      <Box mb={6}>
        <VStack spacing={4} align="stretch">
          {/* Fila 1: B√∫squeda y filtros */}
          <Flex direction={{ base: "column", md: "row" }} gap={4} align="center">
            <InputGroup maxW={{ base: "100%", md: "400px" }}>
              <InputLeftElement pointerEvents="none">
                <SearchIcon color="gray.300" />
              </InputLeftElement>
              <Input
                placeholder="Buscar por texto o slug..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </InputGroup>
            
            <HStack spacing={4} flexWrap="wrap">
              {/* Filtro por estado */}
              <Select 
                value={statusFilter} 
                onChange={(e) => setStatusFilter(e.target.value as CopyStatus | "all")}
                width={{ base: "100%", md: "200px" }}
                placeholder="Filtrar por estado"
              >
                <option value="all">Todos los estados</option>
                <option value="not_assigned">Sin asignar</option>
                <option value="assigned">Asignados</option>
                <option value="translated">Traducidos</option>
                <option value="reviewed">Revisados</option>
                <option value="approved">Aprobados</option>
                <option value="rejected">Rechazados</option>
              </Select>
              
              {/* Filtro por etiqueta */}
              <Select
                value={tagFilter}
                onChange={(e) => setTagFilter(e.target.value)}
                width={{ base: "100%", md: "200px" }}
                placeholder="Filtrar por etiqueta"
              >
                <option value="all">Todas las etiquetas</option>
                {availableTags.map(tag => (
                  <option key={tag} value={tag}>{tag.charAt(0).toUpperCase() + tag.slice(1)}</option>
                ))}
              </Select>
            </HStack>
          </Flex>
          
          {/* Fila 2: Vistas y exportaci√≥n */}
          <Flex direction={{ base: "column", md: "row" }} justify="space-between" align="center" gap={4}>
            {/* Botones de vista */}
            <HStack spacing={2}>
              <Text fontWeight="medium" fontSize="sm">Vista:</Text>
              <Button
                size="sm"
                colorScheme={viewMode === "list" ? "blue" : "gray"}
                variant={viewMode === "list" ? "solid" : "outline"}
                onClick={() => setViewMode("list")}
                leftIcon={<span>üìã</span>}
              >
                Lista
              </Button>
              <Button
                size="sm"
                colorScheme={viewMode === "table" ? "blue" : "gray"}
                variant={viewMode === "table" ? "solid" : "outline"}
                onClick={() => setViewMode("table")}
                leftIcon={<span>üìä</span>}
              >
                Tabla
              </Button>
            </HStack>
            
            {/* Exportaci√≥n */}
            <HStack spacing={3}>
              <Text fontWeight="medium" fontSize="sm">Exportar:</Text>
              {/* Selector de idiomas para exportaci√≥n */}
              <Select 
                value={exportLanguage} 
                onChange={(e) => setExportLanguage(e.target.value)}
                size="sm"
                width="130px"
              >
                <option value="all">Todos</option>
                <option value="es">Espa√±ol</option>
                <option value="en">Ingl√©s</option>
                <option value="pt">Portugu√©s</option>
                <option value="fr">Franc√©s</option>
                <option value="it">Italiano</option>
                <option value="de">Alem√°n</option>
              </Select>
              
              <Button
                size="sm"
                colorScheme="blue"
                onClick={exportToJson}
                isDisabled={copys.length === 0 || isExporting}
                isLoading={isExporting}
                loadingText="Exportando..."
              >
                Exportar JSON
              </Button>
              <Button
                size="sm"
                colorScheme="green"
                onClick={exportToGoogleSheets}
                isDisabled={copys.length === 0 || isExporting}
                isLoading={isExporting}
                loadingText="Exportando..."
                leftIcon={!isExporting ? <span>üìä</span> : undefined}
              >
                Google Sheets
              </Button>
            </HStack>
          </Flex>
        </VStack>
      </Box>
      
      {/* Indicador de carga durante la carga inicial */}
      {isLoading ? (
        <Box textAlign="center" py={10}>
          <VStack spacing={4}>
            <Text fontSize="lg">Cargando datos...</Text>
            <Box>
              <span role="img" aria-label="loading" style={{ fontSize: '2rem' }}>‚è≥</span>
            </Box>
          </VStack>
        </Box>
      ) : viewMode === "list" ? (
        <>
          <CopyTable 
            copys={filteredCopys} 
            onDelete={handleDeleteConfirmation} 
            onEdit={handleEdit} 
            onViewHistory={handleViewHistory}
          />
          
          {/* Contador de resultados para vista lista */}
          <Text mt={2} fontSize="sm" color="gray.600">
            {filteredCopys.length === copys.length
              ? `Mostrando ${copys.length} copys`
              : `Mostrando ${filteredCopys.length} de ${copys.length} copys`}
          </Text>
        </>
      ) : (
        <CopyTableView 
          copys={filteredCopys}
          onDelete={handleDeleteConfirmation}
          onEdit={handleEdit}
          onViewHistory={handleViewHistory}
          onSave={(data) => handleSave(data, false)} // Pasamos handleSave para la importaci√≥n masiva
          languages={["es", "en", "pt", "fr", "it", "de"]} // Todos los idiomas soportados
        />
      )}
      
      {/* Modal de historial */}
      <HistoryModal
        copy={selectedHistoryCopy}
        isOpen={isHistoryOpen}
        onClose={onHistoryClose}
      />
      
      {/* Modal de confirmaci√≥n para eliminar copy */}
      <Modal isOpen={isDeleteModalOpen} onClose={onDeleteModalClose}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader color="red.500">
            <HStack>
              <span>‚ö†Ô∏è</span>
              <Text>Confirmar eliminaci√≥n</Text>
            </HStack>
          </ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <VStack align="start" spacing={4}>
              <Text>¬øEst√° seguro que desea eliminar este copy?</Text>
              {copyToDelete && (
                <Box p={3} bg="gray.100" borderRadius="md" width="100%">
                  <Text fontWeight="bold">Slug: {copyToDelete.slug}</Text>
                  <Text fontSize="sm" mt={1}>ID: {copyToDelete.id}</Text>
                </Box>
              )}
              <Text color="red.500" fontWeight="semibold">Esta acci√≥n no se puede deshacer.</Text>
            </VStack>
          </ModalBody>
          <ModalFooter>
            <Button variant="outline" mr={3} onClick={onDeleteModalClose}>
              Cancelar
            </Button>
            <Button 
              colorScheme="red" 
              onClick={() => {
                if (copyToDelete) {
                  // Llamar a la funci√≥n de eliminaci√≥n
                  const updatedCopys = copys.filter((copy) => copy.id !== copyToDelete.id);
                  setCopys(updatedCopys);
                  
                  // Actualizar localStorage
                  localStorage.setItem('copys', JSON.stringify(updatedCopys));
                  
                  // Mostrar notificaci√≥n
                  toast({
                    title: "Copy eliminado",
                    description: "El copy ha sido eliminado correctamente",
                    status: "success",
                    duration: 3000,
                    isClosable: true,
                  });
                  
                  // Log para debugging
                  console.log('üóëÔ∏è Copy eliminado:', copyToDelete.id);
                  
                  // Limpiar el estado
                  setCopyToDelete(null);
                }
                onDeleteModalClose();
              }}
            >
              Confirmar eliminaci√≥n
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
    </Container>
  );
}
