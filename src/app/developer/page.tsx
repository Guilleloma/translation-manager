'use client';

import { useState, useEffect } from 'react';
import { Copy } from '@/types/copy';

interface AutoGeneratedCopy extends Copy {
  isAutoGenerated: boolean;
  suggestedSlug?: string;
}

export default function DeveloperPage() {
  const [autoGeneratedCopies, setAutoGeneratedCopies] = useState<AutoGeneratedCopy[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedLanguage, setSelectedLanguage] = useState('es');
  const [editingSlug, setEditingSlug] = useState<string | null>(null);
  const [newSlug, setNewSlug] = useState('');

  const languages = [
    { code: 'es', name: 'Espa√±ol' },
    { code: 'en', name: 'English' },
    { code: 'fr', name: 'Fran√ßais' },
    { code: 'de', name: 'Deutsch' },
    { code: 'it', name: 'Italiano' },
    { code: 'pt', name: 'Portugu√™s' }
  ];

  // Funci√≥n para detectar si un slug es auto-generado
  const isSlugAutoGenerated = (slug: string, text: string): boolean => {
    // Detectar patrones de slugs auto-generados:
    // 1. Slugs que empiezan con "auto_"
    // 2. Slugs que son versiones simplificadas del texto (primeras palabras + timestamp)
    // 3. Slugs que contienen timestamps o n√∫meros aleatorios
    const autoPatterns = [
      /^auto_/,
      /^text_\d+/,
      /\d{10,}/,  // timestamps
      /^[a-z]+_\d+$/,
      /^copy_\d+$/
    ];

    return autoPatterns.some(pattern => pattern.test(slug));
  };

  // Funci√≥n para generar sugerencia de slug basada en el texto
  const generateSuggestedSlug = (text: string): string => {
    return text
      .toLowerCase()
      .replace(/[√°√†√§√¢]/g, 'a')
      .replace(/[√©√®√´√™]/g, 'e')
      .replace(/[√≠√¨√Ø√Æ]/g, 'i')
      .replace(/[√≥√≤√∂√¥]/g, 'o')
      .replace(/[√∫√π√º√ª]/g, 'u')
      .replace(/[√±]/g, 'n')
      .replace(/[^a-z0-9\s]/g, '')
      .trim()
      .split(/\s+/)
      .slice(0, 3)
      .join('_');
  };

  useEffect(() => {
    fetchAutoGeneratedCopies();
  }, [selectedLanguage]);

  const fetchAutoGeneratedCopies = async () => {
    try {
      setLoading(true);
      const response = await fetch(`/api/copys?language=${selectedLanguage}`);
      const data = await response.json();
      
      if (data.success) {
        // Filtrar y marcar copys con slugs auto-generados
        const autoGenerated = data.copys
          .filter((copy: Copy) => isSlugAutoGenerated(copy.slug, copy.text))
          .map((copy: Copy) => ({
            ...copy,
            isAutoGenerated: true,
            suggestedSlug: generateSuggestedSlug(copy.text)
          }));
        
        setAutoGeneratedCopies(autoGenerated);
      }
    } catch (error) {
      console.error('Error fetching auto-generated copies:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleUpdateSlug = async (copyId: string, oldSlug: string) => {
    if (!newSlug.trim()) return;

    try {
      const response = await fetch(`/api/copys/${copyId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          slug: newSlug.trim()
        }),
      });

      const data = await response.json();
      
      if (data.success) {
        // Actualizar la lista local
        setAutoGeneratedCopies(prev => 
          prev.filter(copy => copy._id !== copyId)
        );
        setEditingSlug(null);
        setNewSlug('');
        
        // Mostrar mensaje de √©xito
        alert(`Slug actualizado de "${oldSlug}" a "${newSlug}"`);
      } else {
        alert(`Error: ${data.error}`);
      }
    } catch (error) {
      console.error('Error updating slug:', error);
      alert('Error al actualizar el slug');
    }
  };

  const handleUseSuggestion = (copyId: string, suggestedSlug: string) => {
    setEditingSlug(copyId);
    setNewSlug(suggestedSlug);
  };

  const startEditing = (copyId: string, currentSlug: string) => {
    setEditingSlug(copyId);
    setNewSlug(currentSlug);
  };

  const cancelEditing = () => {
    setEditingSlug(null);
    setNewSlug('');
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 p-8">
        <div className="max-w-6xl mx-auto">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
            <p className="mt-4 text-gray-600">Cargando textos pendientes de revisi√≥n...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            üîß Panel de Developer
          </h1>
          <p className="text-gray-600">
            Gestiona los textos que necesitan asignaci√≥n de slugs descriptivos
          </p>
        </div>

        {/* Language Selector */}
        <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Idioma a revisar:
          </label>
          <select
            value={selectedLanguage}
            onChange={(e) => setSelectedLanguage(e.target.value)}
            className="w-full max-w-xs px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            {languages.map((lang) => (
              <option key={lang.code} value={lang.code}>
                {lang.name}
              </option>
            ))}
          </select>
        </div>

        {/* Stats */}
        <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="text-center">
              <div className="text-2xl font-bold text-orange-600">
                {autoGeneratedCopies.length}
              </div>
              <div className="text-sm text-gray-600">
                Textos con slugs auto-generados
              </div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">
                {autoGeneratedCopies.filter(copy => copy.suggestedSlug).length}
              </div>
              <div className="text-sm text-gray-600">
                Con sugerencias disponibles
              </div>
            </div>
            <div className="text-center">
              <div className="text-2xl font-bold text-green-600">
                {editingSlug ? '1' : '0'}
              </div>
              <div className="text-sm text-gray-600">
                En edici√≥n
              </div>
            </div>
          </div>
        </div>

        {/* Auto-generated copies table */}
        {autoGeneratedCopies.length === 0 ? (
          <div className="bg-white rounded-lg shadow-sm p-8 text-center">
            <div className="text-green-600 text-6xl mb-4">‚úÖ</div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">
              ¬°Excelente trabajo!
            </h3>
            <p className="text-gray-600">
              No hay textos con slugs auto-generados en {languages.find(l => l.code === selectedLanguage)?.name}.
              Todos los slugs est√°n correctamente asignados.
            </p>
          </div>
        ) : (
          <div className="bg-white rounded-lg shadow-sm overflow-hidden">
            <div className="px-6 py-4 border-b border-gray-200">
              <h2 className="text-lg font-semibold text-gray-900">
                Textos que necesitan revisi√≥n de slug
              </h2>
              <p className="text-sm text-gray-600 mt-1">
                Estos textos tienen slugs auto-generados que deber√≠an ser reemplazados por slugs m√°s descriptivos
              </p>
            </div>
            
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Slug Actual
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Texto
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Sugerencia
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {autoGeneratedCopies.map((copy) => (
                    <tr key={copy._id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        {editingSlug === copy._id ? (
                          <input
                            type="text"
                            value={newSlug}
                            onChange={(e) => setNewSlug(e.target.value)}
                            className="w-full px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Nuevo slug"
                          />
                        ) : (
                          <span className="text-sm font-mono text-orange-600 bg-orange-50 px-2 py-1 rounded">
                            {copy.slug}
                          </span>
                        )}
                      </td>
                      <td className="px-6 py-4">
                        <div className="text-sm text-gray-900 max-w-xs truncate">
                          {copy.text}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {copy.suggestedSlug && (
                          <span className="text-sm font-mono text-green-600 bg-green-50 px-2 py-1 rounded">
                            {copy.suggestedSlug}
                          </span>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm">
                        {editingSlug === copy._id ? (
                          <div className="flex space-x-2">
                            <button
                              onClick={() => handleUpdateSlug(copy._id, copy.slug)}
                              className="bg-green-600 text-white px-3 py-1 rounded text-xs hover:bg-green-700"
                            >
                              Guardar
                            </button>
                            <button
                              onClick={cancelEditing}
                              className="bg-gray-500 text-white px-3 py-1 rounded text-xs hover:bg-gray-600"
                            >
                              Cancelar
                            </button>
                          </div>
                        ) : (
                          <div className="flex space-x-2">
                            <button
                              onClick={() => startEditing(copy._id, copy.slug)}
                              className="bg-blue-600 text-white px-3 py-1 rounded text-xs hover:bg-blue-700"
                            >
                              Editar
                            </button>
                            {copy.suggestedSlug && (
                              <button
                                onClick={() => handleUseSuggestion(copy._id, copy.suggestedSlug!)}
                                className="bg-green-600 text-white px-3 py-1 rounded text-xs hover:bg-green-700"
                              >
                                Usar sugerencia
                              </button>
                            )}
                          </div>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {/* Help section */}
        <div className="mt-8 bg-blue-50 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-blue-900 mb-3">
            üí° Consejos para buenos slugs
          </h3>
          <ul className="text-sm text-blue-800 space-y-2">
            <li>‚Ä¢ Usa nombres descriptivos que indiquen el contexto: <code>button.save</code>, <code>error.validation</code></li>
            <li>‚Ä¢ Agrupa por funcionalidad: <code>auth.login</code>, <code>auth.logout</code>, <code>auth.register</code></li>
            <li>‚Ä¢ Evita n√∫meros y timestamps: <code>text_123</code> ‚Üí <code>welcome.message</code></li>
            <li>‚Ä¢ Usa snake_case o dot.notation consistentemente</li>
            <li>‚Ä¢ Piensa en c√≥mo otros developers buscar√°n este texto</li>
          </ul>
        </div>
      </div>
    </div>
  );
}
