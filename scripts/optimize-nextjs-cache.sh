#!/bin/bash

# Script para optimizar el rendimiento de Next.js
# Este script implementa varias t√©cnicas para mejorar los tiempos de compilaci√≥n y navegaci√≥n

echo "üöÄ Iniciando optimizaci√≥n de Next.js..."

# Verificar si estamos en la ra√≠z del proyecto
if [ ! -f "package.json" ]; then
  echo "‚ùå Error: Este script debe ejecutarse desde la ra√≠z del proyecto"
  exit 1
fi

# 1. Limpiar cach√© de Next.js
echo "üßπ Limpiando cach√© de Next.js..."
rm -rf .next/cache

# 2. Optimizar node_modules
echo "üì¶ Optimizando node_modules..."
npm dedupe

# 3. Verificar y actualizar configuraci√≥n de Next.js
echo "‚öôÔ∏è Verificando configuraci√≥n de Next.js..."

# Crear archivo de configuraci√≥n optimizado si no existe
if ! grep -q "swcMinify" next.config.ts; then
  echo "‚úèÔ∏è Actualizando next.config.ts con optimizaciones..."
  
  # Hacer backup del archivo original
  cp next.config.ts next.config.ts.bak
  
  # Reemplazar configuraci√≥n
  cat > next.config.ts << EOL
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
  reactStrictMode: true,
  poweredByHeader: false,
  compress: true,
  productionBrowserSourceMaps: false,
  experimental: {
    optimizeCss: true,
    optimizePackageImports: ['@chakra-ui/react'],
    serverActions: {
      bodySizeLimit: '2mb',
    },
  },
};

export default nextConfig;
EOL
  echo "‚úÖ Configuraci√≥n de Next.js actualizada"
else
  echo "‚úÖ Configuraci√≥n de Next.js ya contiene optimizaciones"
fi

# 4. Crear archivo .env.local con optimizaciones si no existe
if [ ! -f ".env.local" ] || ! grep -q "NEXT_TELEMETRY_DISABLED" .env.local; then
  echo "‚úèÔ∏è Creando archivo .env.local con optimizaciones..."
  
  echo "NEXT_TELEMETRY_DISABLED=1" >> .env.local
  echo "NEXT_RUNTIME_OPTIMIZE=1" >> .env.local
  
  echo "‚úÖ Archivo .env.local actualizado"
else
  echo "‚úÖ Archivo .env.local ya contiene optimizaciones"
fi

# 5. Crear script de desarrollo optimizado
echo "üìù Creando script de desarrollo optimizado..."

# Actualizar package.json para incluir el script optimizado
if ! grep -q "\"dev:optimized\":" package.json; then
  # Hacer backup del archivo original
  cp package.json package.json.bak
  
  # Insertar nuevo script antes de la l√≠nea "dev:mongodb"
  sed -i '' '/\"dev:mongodb\"/i\
    "dev:optimized": "NEXT_RUNTIME_OPTIMIZE=1 next dev --turbopack",
' package.json
  
  echo "‚úÖ Script dev:optimized a√±adido a package.json"
else
  echo "‚úÖ Script dev:optimized ya existe en package.json"
fi

# 6. Crear script combinado optimizado + mongodb
if ! grep -q "\"dev:optimized:mongodb\":" package.json; then
  # Insertar nuevo script despu√©s de la l√≠nea "dev:optimized"
  sed -i '' '/\"dev:optimized\"/a\
    "dev:optimized:mongodb": "npm run mongodb:check && NEXT_RUNTIME_OPTIMIZE=1 next dev --turbopack",
' package.json
  
  echo "‚úÖ Script dev:optimized:mongodb a√±adido a package.json"
else
  echo "‚úÖ Script dev:optimized:mongodb ya existe en package.json"
fi

echo "üéâ Optimizaci√≥n completada. Para ejecutar la aplicaci√≥n con optimizaciones, usa:"
echo "   npm run dev:optimized:mongodb"
echo ""
echo "üìä Estas optimizaciones deber√≠an reducir significativamente los tiempos de compilaci√≥n y navegaci√≥n"
