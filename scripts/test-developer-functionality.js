#!/usr/bin/env node

/**
 * Script de pruebas automatizadas para la funcionalidad del panel de developer
 * Valida la detección de slugs auto-generados, generación de sugerencias y prioridades
 */

// Importar las funciones desde el archivo de test-data
const path = require('path');

// Simular las funciones ya que no podemos importar TypeScript directamente
const isSlugAutoGenerated = (slug, text) => {
  const autoPatterns = [
    /^auto_/,
    /^text_\d+/,
    /\d{10,}/,  // timestamps
    /^[a-z]+_\d+$/,
    /^copy_\d+$/
  ];

  return autoPatterns.some(pattern => pattern.test(slug));
};

const generateSuggestedSlug = (text) => {
  return text
    .toLowerCase()
    .replace(/[áàäâ]/g, 'a')
    .replace(/[éèëê]/g, 'e')
    .replace(/[íìïî]/g, 'i')
    .replace(/[óòöô]/g, 'o')
    .replace(/[úùüû]/g, 'u')
    .replace(/[ñ]/g, 'n')
    .replace(/[^a-z0-9\s]/g, '')
    .trim()
    .split(/\s+/)
    .slice(0, 3)
    .join('_');
};

const determinePriority = (slug, text) => {
  // Alta prioridad: slugs con timestamps o muy genéricos
  if (/\d{10,}/.test(slug) || /^(auto_|text_|copy_)/.test(slug)) {
    return 'high';
  }
  
  // Media prioridad: textos largos con slugs simples
  if (text.length > 50 && /^[a-z]+_\d+$/.test(slug)) {
    return 'medium';
  }
  
  return 'low';
};

// Casos de prueba
const testCases = [
  {
    slug: 'auto_1234',
    text: 'Texto de prueba',
    expectedDetection: true,
    expectedPriority: 'high',
    description: 'Slug con prefijo auto_'
  },
  {
    slug: 'text_456',
    text: 'Otro texto',
    expectedDetection: true,
    expectedPriority: 'high',
    description: 'Slug con prefijo text_ y número'
  },
  {
    slug: 'mensaje_1703875200000',
    text: 'Mensaje con timestamp',
    expectedDetection: true,
    expectedPriority: 'high',
    description: 'Slug con timestamp'
  },
  {
    slug: 'button.save',
    text: 'Guardar',
    expectedDetection: false,
    expectedPriority: 'low',
    description: 'Slug descriptivo válido'
  },
  {
    slug: 'error.validation',
    text: 'Error de validación',
    expectedDetection: false,
    expectedPriority: 'low',
    description: 'Slug con namespace válido'
  },
  {
    slug: 'welcome_message',
    text: 'Mensaje de bienvenida',
    expectedDetection: false,
    expectedPriority: 'low',
    description: 'Slug descriptivo sin números'
  },
  {
    slug: 'texto_123',
    text: 'Este es un texto muy largo que debería tener prioridad media porque tiene más de cincuenta caracteres',
    expectedDetection: true,
    expectedPriority: 'medium',
    description: 'Texto largo con slug simple (prioridad media)'
  }
];

const suggestionTests = [
  {
    text: 'Bienvenido a nuestra aplicación',
    expected: 'bienvenido_a_nuestra'
  },
  {
    text: 'Guardar cambios',
    expected: 'guardar_cambios'
  },
  {
    text: 'Error de validación',
    expected: 'error_de_validacion'
  },
  {
    text: 'Usuario no encontrado',
    expected: 'usuario_no_encontrado'
  },
  {
    text: 'Configuración avanzada del sistema',
    expected: 'configuracion_avanzada_del'
  },
  {
    text: 'Ñoño José María',
    expected: 'nono_jose_maria'
  },
  {
    text: '¡Hola! ¿Cómo estás?',
    expected: 'hola_como_estas'
  }
];

function runTests() {
  console.log('🧪 Ejecutando pruebas del Panel de Developer\n');

  let totalTests = 0;
  let passedTests = 0;

  // Test 1: Detección de slugs auto-generados
  console.log('📋 Test 1: Detección de slugs auto-generados');
  testCases.forEach((testCase, index) => {
    totalTests++;
    const result = isSlugAutoGenerated(testCase.slug, testCase.text);
    const passed = result === testCase.expectedDetection;
    
    console.log(`  ${passed ? '✅' : '❌'} Test ${index + 1}: ${testCase.description}`);
    console.log(`     Slug: "${testCase.slug}" → ${result ? 'Auto-generado' : 'Válido'}`);
    
    if (passed) {
      passedTests++;
    } else {
      console.log(`     ❌ Esperado: ${testCase.expectedDetection}, Obtenido: ${result}`);
    }
  });

  console.log(`\n📊 Resultado Test 1: ${passedTests}/${totalTests} pruebas de detección pasaron\n`);

  // Test 2: Determinación de prioridades
  console.log('📋 Test 2: Determinación de prioridades');
  const priorityTestsStart = totalTests;
  testCases.forEach((testCase, index) => {
    totalTests++;
    const result = determinePriority(testCase.slug, testCase.text);
    const passed = result === testCase.expectedPriority;
    
    console.log(`  ${passed ? '✅' : '❌'} Prioridad ${index + 1}: ${testCase.description}`);
    console.log(`     Prioridad: ${result} (esperada: ${testCase.expectedPriority})`);
    
    if (passed) {
      passedTests++;
    } else {
      console.log(`     ❌ Esperado: ${testCase.expectedPriority}, Obtenido: ${result}`);
    }
  });

  const priorityPassed = passedTests - (priorityTestsStart);
  const priorityTotal = totalTests - priorityTestsStart;
  console.log(`\n📊 Resultado Test 2: ${priorityPassed}/${priorityTotal} pruebas de prioridad pasaron\n`);

  // Test 3: Generación de sugerencias
  console.log('📋 Test 3: Generación de sugerencias de slug');
  const suggestionTestsStart = totalTests;
  suggestionTests.forEach((testCase, index) => {
    totalTests++;
    const result = generateSuggestedSlug(testCase.text);
    const passed = result === testCase.expected;
    
    console.log(`  ${passed ? '✅' : '❌'} Sugerencia ${index + 1}:`);
    console.log(`     Texto: "${testCase.text}"`);
    console.log(`     Sugerencia: "${result}"`);
    
    if (passed) {
      passedTests++;
    } else {
      console.log(`     ❌ Esperado: "${testCase.expected}", Obtenido: "${result}"`);
    }
  });

  const suggestionPassed = passedTests - suggestionTestsStart;
  const suggestionTotal = totalTests - suggestionTestsStart;
  console.log(`\n📊 Resultado Test 3: ${suggestionPassed}/${suggestionTotal} sugerencias correctas\n`);

  // Resumen final
  console.log('🎯 RESUMEN FINAL:');
  console.log(`   Total de pruebas: ${totalTests}`);
  console.log(`   Pruebas exitosas: ${passedTests}`);
  console.log(`   Tasa de éxito: ${Math.round((passedTests / totalTests) * 100)}%`);

  // Desglose por categoría
  console.log('\n📈 Desglose por categoría:');
  console.log(`   Detección de slugs: ${passedTests >= testCases.length ? testCases.length : Math.min(passedTests, testCases.length)}/${testCases.length}`);
  console.log(`   Prioridades: ${priorityPassed}/${priorityTotal}`);
  console.log(`   Sugerencias: ${suggestionPassed}/${suggestionTotal}`);

  if (passedTests === totalTests) {
    console.log('\n🎉 ¡Todas las pruebas pasaron! El panel de developer está listo.');
    return true;
  } else {
    console.log('\n⚠️  Algunas pruebas fallaron. Revisar la implementación.');
    return false;
  }
}

// Ejecutar solo si se llama directamente
if (require.main === module) {
  const success = runTests();
  process.exit(success ? 0 : 1);
}

module.exports = { 
  runTests, 
  isSlugAutoGenerated, 
  generateSuggestedSlug, 
  determinePriority 
};
